"use client"

import { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Search, Filter, Code, Shield, Zap, Star, Clock } from "lucide-react"
import Link from "next/link"
import AnimatedText from "@/components/animated-text"

// Mock data for exploits
const mockExploits = [
  {
    id: "exploit-1",
    title: "Infinite Resources Hack",
    description: "Get unlimited resources in supported games with this exploit.",
    category: "Game Hack",
    image: "/placeholder.svg?height=200&width=400&text=Infinite+Resources",
    featured: true,
    downloads: 1245,
    date: "2023-11-15",
    compatibility: ["Chrome", "Firefox", "Edge"],
  },
  {
    id: "exploit-2",
    title: "Admin Panel Bypass",
    description: "Bypass admin restrictions on certain websites.",
    category: "Web Exploit",
    image: "/placeholder.svg?height=200&width=400&text=Admin+Bypass",
    featured: false,
    downloads: 876,
    date: "2023-12-01",
    compatibility: ["Chrome", "Firefox"],
  },
  {
    id: "exploit-3",
    title: "Cookie Grabber",
    description: "Extract and analyze cookies from websites for educational purposes.",
    category: "Web Tool",
    image: "/placeholder.svg?height=200&width=400&text=Cookie+Tool",
    featured: true,
    downloads: 2134,
    date: "2023-10-22",
    compatibility: ["Chrome", "Firefox", "Edge", "Safari"],
  },
  {
    id: "exploit-4",
    title: "Network Analyzer",
    description: "Analyze network traffic and identify vulnerabilities.",
    category: "Network",
    image: "/placeholder.svg?height=200&width=400&text=Network+Analyzer",
    featured: false,
    downloads: 543,
    date: "2024-01-05",
    compatibility: ["Chrome", "Firefox"],
  },
  {
    id: "exploit-5",
    title: "Script Injector",
    description: "Inject custom scripts into websites for automation and enhancement.",
    category: "Web Tool",
    image: "/placeholder.svg?height=200&width=400&text=Script+Injector",
    featured: true,
    downloads: 1876,
    date: "2023-09-18",
    compatibility: ["Chrome", "Firefox", "Edge"],
  },
  {
    id: "exploit-6",
    title: "Game Speed Modifier",
    description: "Modify game speed for supported browser games.",
    category: "Game Hack",
    image: "/placeholder.svg?height=200&width=400&text=Speed+Modifier",
    featured: false,
    downloads: 987,
    date: "2024-02-10",
    compatibility: ["Chrome", "Firefox"],
  },
  {
    id: "exploit-7",
    title: "Ad Blocker Plus",
    description: "Advanced ad blocking with script injection capabilities.",
    category: "Web Tool",
    image: "/placeholder.svg?height=200&width=400&text=Ad+Blocker",
    featured: false,
    downloads: 3421,
    date: "2023-08-30",
    compatibility: ["Chrome", "Firefox", "Edge", "Safari"],
  },
  {
    id: "exploit-8",
    title: "Firewall Bypass",
    description: "Bypass network restrictions and firewalls safely.",
    category: "Network",
    image: "/placeholder.svg?height=200&width=400&text=Firewall+Bypass",
    featured: true,
    downloads: 1543,
    date: "2024-01-22",
    compatibility: ["Chrome", "Firefox", "Edge"],
  },
]

const categories = ["All", "Game Hack", "Web Exploit", "Web Tool", "Network"]

export default function ExploitsPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("All")
  const [filteredExploits, setFilteredExploits] = useState(mockExploits)
  const [activeTab, setActiveTab] = useState("all")

  useEffect(() => {
    let results = mockExploits

    // Filter by search term
    if (searchTerm) {
      results = results.filter(
        (exploit) =>
          exploit.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
          exploit.description.toLowerCase().includes(searchTerm.toLowerCase()),
      )
    }

    // Filter by category
    if (selectedCategory !== "All") {
      results = results.filter((exploit) => exploit.category === selectedCategory)
    }

    // Filter by tab
    if (activeTab === "featured") {
      results = results.filter((exploit) => exploit.featured)
    } else if (activeTab === "newest") {
      results = [...results].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
    } else if (activeTab === "popular") {
      results = [...results].sort((a, b) => b.downloads - a.downloads)
    }

    setFilteredExploits(results)
  }, [searchTerm, selectedCategory, activeTab])

  return (
    <div className="py-16">
      <div className="max-w-7xl mx-auto">
        <div className="flex items-center mb-8">
          <Code className="h-8 w-8 text-primary mr-3" />
          <h1 className="text-3xl md:text-5xl font-bold text-white">
            <AnimatedText text="Exploits" className="text-gradient" />
          </h1>
        </div>

        <div className="mb-8 glass rounded-xl p-6 border border-primary/20">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50" />
              <Input
                type="text"
                placeholder="Search exploits..."
                className="pl-10 bg-black/50 border-primary/30 focus:border-primary"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <div className="flex gap-2">
              <div className="relative">
                <select
                  className="appearance-none bg-black/50 border border-primary/30 rounded-md px-4 py-2 pr-8 text-white focus:outline-none focus:border-primary"
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                >
                  {categories.map((category) => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
                <Filter className="absolute right-2 top-1/2 transform -translate-y-1/2 text-white/50 pointer-events-none h-4 w-4" />
              </div>
              <Button variant="outline" className="border-primary/30 text-white">
                <Shield className="h-4 w-4 mr-2" />
                Safe Mode
              </Button>
            </div>
          </div>
        </div>

        <Tabs defaultValue="all" className="mb-8" onValueChange={setActiveTab}>
          <TabsList className="grid grid-cols-4 mb-6">
            <TabsTrigger value="all">
              <Zap className="h-4 w-4 mr-2" />
              All Exploits
            </TabsTrigger>
            <TabsTrigger value="featured">
              <Star className="h-4 w-4 mr-2" />
              Featured
            </TabsTrigger>
            <TabsTrigger value="newest">
              <Clock className="h-4 w-4 mr-2" />
              Newest
            </TabsTrigger>
            <TabsTrigger value="popular">
              <Zap className="h-4 w-4 mr-2" />
              Most Popular
            </TabsTrigger>
          </TabsList>

          <TabsContent value="all" className="mt-0">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredExploits.map((exploit) => (
                <Link href={`/exploits/${exploit.id}`} key={exploit.id}>
                  <Card className="glass border-primary/20 hover:border-primary/50 transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-primary/20 group">
                    <CardContent className="p-0">
                      <div className="relative overflow-hidden rounded-t-lg">
                        <div className="aspect-video bg-black/50 relative">
                          <img
                            src={exploit.image || "/placeholder.svg"}
                            alt={exploit.title}
                            className="w-full h-full object-cover opacity-80 group-hover:opacity-100 transition-opacity"
                          />
                          <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent"></div>
                        </div>
                        <div className="absolute bottom-0 left-0 right-0 p-4">
                          <h3 className="text-xl font-bold text-white mb-1 group-hover:text-primary transition-colors">
                            {exploit.title}
                          </h3>
                          <p className="text-sm text-white/70 line-clamp-1">{exploit.description}</p>
                        </div>
                        {exploit.featured && (
                          <div className="absolute top-2 right-2 bg-primary/90 text-white text-xs px-2 py-1 rounded-full">
                            Featured
                          </div>
                        )}
                      </div>
                      <div className="p-4 pt-2 flex justify-between items-center">
                        <div className="flex items-center">
                          <div className="text-xs bg-black/30 text-white/70 px-2 py-1 rounded">{exploit.category}</div>
                        </div>
                        <div className="text-xs text-white/50">{exploit.downloads} downloads</div>
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="featured" className="mt-0">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredExploits.map((exploit) => (
                <Link href={`/exploits/${exploit.id}`} key={exploit.id}>
                  <Card className="glass border-primary/20 hover:border-primary/50 transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-primary/20 group">
                    <CardContent className="p-0">
                      <div className="relative overflow-hidden rounded-t-lg">
                        <div className="aspect-video bg-black/50 relative">
                          <img
                            src={exploit.image || "/placeholder.svg"}
                            alt={exploit.title}
                            className="w-full h-full object-cover opacity-80 group-hover:opacity-100 transition-opacity"
                          />
                          <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent"></div>
                        </div>
                        <div className="absolute bottom-0 left-0 right-0 p-4">
                          <h3 className="text-xl font-bold text-white mb-1 group-hover:text-primary transition-colors">
                            {exploit.title}
                          </h3>
                          <p className="text-sm text-white/70 line-clamp-1">{exploit.description}</p>
                        </div>
                        <div className="absolute top-2 right-2 bg-primary/90 text-white text-xs px-2 py-1 rounded-full">
                          Featured
                        </div>
                      </div>
                      <div className="p-4 pt-2 flex justify-between items-center">
                        <div className="flex items-center">
                          <div className="text-xs bg-black/30 text-white/70 px-2 py-1 rounded">{exploit.category}</div>
                        </div>
                        <div className="text-xs text-white/50">{exploit.downloads} downloads</div>
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="newest" className="mt-0">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredExploits.map((exploit) => (
                <Link href={`/exploits/${exploit.id}`} key={exploit.id}>
                  <Card className="glass border-primary/20 hover:border-primary/50 transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-primary/20 group">
                    <CardContent className="p-0">
                      <div className="relative overflow-hidden rounded-t-lg">
                        <div className="aspect-video bg-black/50 relative">
                          <img
                            src={exploit.image || "/placeholder.svg"}
                            alt={exploit.title}
                            className="w-full h-full object-cover opacity-80 group-hover:opacity-100 transition-opacity"
                          />
                          <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent"></div>
                        </div>
                        <div className="absolute bottom-0 left-0 right-0 p-4">
                          <h3 className="text-xl font-bold text-white mb-1 group-hover:text-primary transition-colors">
                            {exploit.title}
                          </h3>
                          <p className="text-sm text-white/70 line-clamp-1">{exploit.description}</p>
                        </div>
                        {exploit.featured && (
                          <div className="absolute top-2 right-2 bg-primary/90 text-white text-xs px-2 py-1 rounded-full">
                            Featured
                          </div>
                        )}
                      </div>
                      <div className="p-4 pt-2 flex justify-between items-center">
                        <div className="flex items-center">
                          <div className="text-xs bg-black/30 text-white/70 px-2 py-1 rounded">{exploit.category}</div>
                        </div>
                        <div className="text-xs text-white/50">{new Date(exploit.date).toLocaleDateString()}</div>
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="popular" className="mt-0">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredExploits.map((exploit) => (
                <Link href={`/exploits/${exploit.id}`} key={exploit.id}>
                  <Card className="glass border-primary/20 hover:border-primary/50 transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-primary/20 group">
                    <CardContent className="p-0">
                      <div className="relative overflow-hidden rounded-t-lg">
                        <div className="aspect-video bg-black/50 relative">
                          <img
                            src={exploit.image || "/placeholder.svg"}
                            alt={exploit.title}
                            className="w-full h-full object-cover opacity-80 group-hover:opacity-100 transition-opacity"
                          />
                          <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-transparent"></div>
                        </div>
                        <div className="absolute bottom-0 left-0 right-0 p-4">
                          <h3 className="text-xl font-bold text-white mb-1 group-hover:text-primary transition-colors">
                            {exploit.title}
                          </h3>
                          <p className="text-sm text-white/70 line-clamp-1">{exploit.description}</p>
                        </div>
                        {exploit.featured && (
                          <div className="absolute top-2 right-2 bg-primary/90 text-white text-xs px-2 py-1 rounded-full">
                            Featured
                          </div>
                        )}
                      </div>
                      <div className="p-4 pt-2 flex justify-between items-center">
                        <div className="flex items-center">
                          <div className="text-xs bg-black/30 text-white/70 px-2 py-1 rounded">{exploit.category}</div>
                        </div>
                        <div className="text-xs text-white/50 font-bold">{exploit.downloads} downloads</div>
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
